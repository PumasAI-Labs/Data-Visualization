{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pumas-AI Data Visualization Workshop","text":"<p>This workshop is an introduction to data visualization in Julia using <code>AlgebraOfGraphics.jl</code>. It covers the following topics:</p> <ul> <li><code>AlgebraOfGraphics.jl</code> syntax.</li> <li>Advanced mapping options.<ul> <li>Use visual elements such as coloring and marker style to encode additional variables. </li> <li>Faceting.</li> </ul> </li> <li>Geometries and statistical visualizations.<ul> <li>Scatter plots, line plots, bar plots, error bars, box plots, and violin plots.</li> <li>Histograms, linear regression, smoothing curves, etc.</li> </ul> </li> <li>Grammar of graphics: use <code>*</code> and <code>+</code> to combine and superimpose layers.</li> <li>Plot customization. </li> </ul> <p>Prerequisites</p> <p>We recommend users being familiar with Julia syntax, especially variables and types.</p> <p>The formal requirements are the Julia Syntax Workshop and its pre-requisites.</p>"},{"location":"#schedule","title":"Schedule","text":"Time (HH:MM) Activity Description 00:00 Setup Download files required for the workshop 00:05 Overview Showcase <code>01-layers.jl</code> 00:15 Mappings Showcase <code>02-mappings.jl</code> 00:30 Geometries Showcase <code>03-geometries.jl</code> 00:40 Grammar of graphics Showcase <code>04-algebra.jl</code> 01:10 Plot customization Showcase <code>05-customization.jl</code> 01:20 Closing remarks See if there are any questions and feedback"},{"location":"#get-in-touch","title":"Get in touch","text":"<p>If you have any suggestions or want to get in touch with our education team, please send an email to training@pumas.ai.</p>"},{"location":"#authors","title":"Authors","text":"<ul> <li>Juan Jos\u00e9 Gonz\u00e1lez Oneto - j.oneto@pumas.ai</li> </ul>"},{"location":"#license","title":"License","text":"<p>This content is licensed under Creative Commons Attribution-ShareAlike 4.0 International.</p> <p></p>"},{"location":"code_of_conduct/","title":"Code of Conduct for Pumas-AI Data Visualization Workshop","text":"<p>At Pumas-AI we are committed to creating a friendly and respectful place for learning, teaching and contributing. All participants in our events and communications are expected to show respect and courtesy to others. To make clear what is expected, everyone participating in Pumas-AI activities is required to conform to the Code of Conduct.</p> <p>Pumas-AI is dedicated to providing a welcoming and supportive environment for all people, regardless of background or identity. As such, we do not tolerate behaviour that is disrespectful to our instructors or learners or that excludes, intimidates, or causes discomfort to others. We do not tolerate discrimination or harassment based on characteristics that include, but are not limited to, gender identity and expression, sexual orientation, disability, physical appearance, body size, citizenship, nationality, ethnic or social origin, pregnancy, familial status, veteran status, genetic information, religion or belief (or lack thereof), membership of a national minority, property, age, education, socio-economic status, technical choices, and experience level.</p>"},{"location":"code_of_conduct/#expected-behaviour","title":"Expected Behaviour","text":"<p>All participants in our events and communications are expected to show respect and courtesy to others. All interactions should be professional regardless of platform: either online or in-person. In order to foster a positive and professional learning environment we encourage the following kinds of behaviours in all Pumas-AI events and platforms:</p> <ul> <li>Use welcoming and inclusive language</li> <li>Be respectful of different viewpoints and experiences</li> <li>Gracefully accept constructive criticism</li> <li>Focus on what is best for the community</li> <li>Show courtesy and respect towards other community members</li> </ul>"},{"location":"code_of_conduct/#unacceptable-behaviour","title":"Unacceptable Behaviour","text":"<p>Examples of unacceptable behaviour by participants at any Pumas-AI event/platform include:</p> <ul> <li>written or verbal comments which have the effect of excluding people on the basis of membership of any specific group</li> <li>causing someone to fear for their safety, such as through stalking, following, or intimidation</li> <li>violent threats or language directed against another person</li> <li>the display of sexual or violent images</li> <li>unwelcome sexual attention</li> <li>nonconsensual or unwelcome physical contact</li> <li>sustained disruption of talks, events or communications</li> <li>insults or put downs</li> <li>sexist, racist, homophobic, transphobic, ableist, or exclusionary jokes</li> <li>excessive swearing</li> <li>incitement to violence, suicide, or self-harm</li> <li>continuing to initiate interaction (including photography or recording) with someone after being asked to stop</li> <li>publication of private communication without consent</li> </ul>"},{"location":"code_of_conduct/#consequences-of-unacceptable-behaviour","title":"Consequences of Unacceptable Behaviour","text":"<p>Participants who are asked to stop any inappropriate behaviour are expected to comply immediately. This applies to any Pumas-AI events and platforms, either online or in-person. If a participant engages in behaviour that violates this code of conduct, the organisers may warn the offender, ask them to leave the event or platform (without refund, if applicable), or engage with Pumas-AI representatives to investigate the Code of Conduct violation and impose appropriate sanctions.</p>"},{"location":"code_of_conduct/#get-in-touch","title":"Get in touch","text":"<p>If you have any suggestions or want to get in touch with our education team, please send an email to training@pumas.ai.</p>"},{"location":"code_of_conduct/#license","title":"License","text":"<p>This content is licensed under Creative Commons Attribution-ShareAlike 4.0 Internacional.</p> <p></p>"},{"location":"contribute/","title":"How to Contribute","text":"<p>If you want to contribute to this workshop, please open a pull request at <code>PumasAI-Labs/Data-Visualization</code>.</p> <p>By submitting a pull request, you are in accordance that your contribution will be licensed under Creative Commons Attribution-ShareAlike 4.0 International.</p> <p>Once your pull request is approved and merged, you'll be acknowledged as one of the authors in the workshop site and GitHub repository.</p>"},{"location":"instructors/","title":"Instructor's Notes for Pumas-AI Data Visualization Workshop","text":"<p>It is a good starting point to ask if learners have experience with the \"grammar of graphics\" plotting approach. This could be either from R's <code>ggplot2</code> or Python's <code>plotnine</code>. Building upon users previous experiences is highly advisable in this workshop. If your experience intersects with the learner's experience, use analogies between these and <code>AoG.jl</code> (short for <code>AlgebraOfGraphics.jl</code>) whenever possible. In the specific case of <code>ggplot2</code>, you can refer learners to the <code>ggplot2</code> versus <code>AoG.jl</code> comparison table in the reference sheets. Start with <code>01-layers.jl</code>, which covers the basic structure used to create a plot with <code>AlgebraOfGraphics.jl</code>: <code>data</code>, <code>mapping</code>, and <code>visual</code> layers. Begin by briefly explaining <code>PharmaDatasets.jl</code>, the source of data for the workshop. Next, go over the <code>data</code> function, which is the simplest layer, used to  inform <code>AoG.jl</code> about the data source for the plot. After that, explain <code>mapping</code>, which is in charge of defining how that data  will be used in the plot. Lastly, cover the <code>visual</code> layer, which defines the type of plot to be created. Once you have explained all the layers, show how to  create a plot by combining them with the <code>*</code> operator (the use of <code>*</code> will be explained in more detail later in the lesson). Finally, showcase the <code>draw</code>  function, which is used to display plots. If you are running the code examples in JuliaHub, you can spend some time demonstrating how to use the plot  navigator. Users might find it particularly useful to learn how to access previously generated plots and how to save plots as images.</p> <p>The last part of <code>01-layers.jl</code> focuses on how to save and download plots. Start by showing how to use the <code>save</code> function to save an image to the present  working directory. Showcase the available file formats for <code>CairoMakie.jl</code>: PNG, SVG and PDF and the <code>px_per_unit</code> and <code>pt_per_unit</code> keyword arguments, which  can be used to customize the image's resolution. As an alternative to <code>save</code>, show how to save plots using VS Code's plot navigator. Once plots are saved, show  how to download them from the file explorer by right clicking on the file and the \"Download ...\" option. </p> <p>Next, move on to the <code>02-mappings.jl</code> script, which focuses on using the <code>mapping</code> function. Start by explaining how to use the <code>color</code> and <code>marker</code> keyword  arguments to incorporate more variables into the plot. Use the provided <code>color</code> example to explain why sometimes <code>nonnumeric</code> is necessary for categorical  variables encoded with numbers. Conclude this part of the lesson by showing that <code>mapping</code> supports using multiple keyword arguments together, as shown in the  example that used both <code>color</code> and <code>marker</code>. The next topic is faceting, which allows creating multiple subplots based on a categorical variable. Discuss the  <code>col</code> and <code>row</code> keyword arguments, used to separate subplots into columns or rows, respectively. Lastly, demonstrate how to create a grid of plots using the  <code>layout</code> keyword argument. </p> <p>Afterward, cover the contents of <code>03-geometries.jl</code>. The code examples in this script focus on the use of <code>visual</code> and the various types of plots that can be  created with <code>AoG.jl</code>. Begin by demonstrating how to create a bar plot and how the built-in function <code>expectation</code> can be useful for automatically generating a  bar plot that shows the mean values of a variable. It may also be helpful to explain the <code>histogram</code> function, which, as the name suggests, facilitates the  creation of histograms. Emphasize how using built-in functions like <code>expectation</code> and <code>histogram</code> reduces the need for data wrangling before plotting. Users  will probably want to know why some built-in functions have to be qualified with <code>AlgebraOfGraphics</code> (for instance, <code>expectation</code> has to be used as  <code>AlgebraOfGraphics.expectation()</code> because both <code>Pumas</code> and <code>AlgebraOfGraphics</code> export the name <code>expectation</code>). Take this opportunity to provide a brief  explanation on name collisions in Julia and show the error message that appears when this is not taken into account. After  that, cover the other geometries discussed in the script: <code>ScatterLines</code>, <code>Errorbars</code>, <code>BoxPlot</code>, and <code>Violin</code>. To conclude this segment of the workshop,  highlight that there are numerous other geometries available and demonstrate how participants can find them in  <code>Makie.jl</code>'s documentation.</p> <p>The next part of the workshop will focus on using the <code>+</code> and <code>*</code> operators in <code>AoG.jl</code>, and the related script is <code>04-algebra.jl</code>. Start by providing a brief  explanation of the <code>*</code> operator, which combines layers and has been used extensively in the previous code examples. Next, show how individual plots can be  superimposed with the <code>+</code> operator, allowing the creation of much more complex plots using different data sources. Next, use the examples to showcase that both  <code>*</code> and <code>+</code> obey the distributive law, enabling the superimposition of layers with a very intuitive and concise syntax. This part of the script should also  introduce the <code>linear</code> and <code>smooth</code> built-in functions, which allow plotting a linear regression and a smoothing line, respectively.</p> <p>The final script for the workshop is <code>05-customization.jl</code>, which focuses on plot customization in <code>AoG.jl</code>. Begin by demonstrating how to customize axis labels  using the pair syntax (<code>:column_name =&gt; \"display name\"</code>) and how a similar syntax can be used to apply transformations and rename in one go (<code>:column_name =&gt;  function =&gt; \"display name\"</code>). Proceed to the next part of the script, which deals with axis customization using the <code>axis</code> keyword argument. Cover the  <code>NamedTuple</code> syntax used to pass arguments to <code>axis</code> and showcase the commonly used customization options through examples. Lastly, emphasize that both <code>AoG.jl</code>  and <code>Makie</code> offer extensive support for customization. Show participants how to explore more customization options in <code>Makie.jl</code>'s  documentation.</p> <p>In the next part of <code>05-customization.jl</code>, cover various customization options, such as creating custom color palettes using the <code>palettes</code> keyword argument and  applying specific customization options to different geometries (e.g., <code>markersize</code> for <code>Scatter</code> and <code>linestyle</code> for <code>Lines</code>). Then, discuss the <code>renamer</code>  helper function, highlighting its role in customizing plot legends, column or row titles. Lastly, explain the <code>figure</code> keyword argument for customizing the  <code>Figure</code> or \"canvas\" on which the plot is drawn.</p>"},{"location":"instructors/#get-in-touch","title":"Get in touch","text":"<p>If you have any suggestions or want to get in touch with our education team, please send an email to training@pumas.ai.</p>"},{"location":"instructors/#license","title":"License","text":"<p>This content is licensed under Creative Commons Attribution-ShareAlike 4.0 International.</p> <p></p>"},{"location":"reference/","title":"Reference Sheets for Pumas-AI Data Visualization Workshop","text":""},{"location":"reference/#key-points","title":"Key Points","text":"<ul> <li>To use <code>AlgebraOfGraphics.jl</code> (<code>AoG.jl</code>), it is necessary to load a <code>Makie.jl</code> backend, with <code>CairoMakie.jl</code> being the one that most users will likely want to  use.</li> <li>A plot in <code>AoG.jl</code> is constructed by combining three layers: <code>data</code>, <code>mapping</code>, and <code>visual</code>.</li> <li>The <code>draw</code> function is used to display a plot.</li> <li>You can save a plot using the <code>save</code> function, which supports creating images in PNG, SVG and PDF formats when <code>CairoMakie.jl</code> is being used. The function is called as <code>save(&lt;filename&gt;, &lt;result from draw&gt;)</code>, where the file format is specified as part of the file name (e.g. <code>name.png</code> or <code>name.svg</code>).</li> <li>The <code>save</code> function allows customizing the figure's resolution through the <code>px_per_unit</code> and <code>pt_per_unit</code> keyword arguments. <code>px_per_unit</code> should be used when creating PNG files, while <code>pt_per_unit</code> should be used for SVG files.</li> <li>The plot navigator in VS Code (in JuliaHub) allows users to preview and save the plots generated by a <code>draw</code> call.</li> <li>The <code>mapping</code> function enables the incorporation of additional variables into a plot through styling elements such as color or marker shape.</li> <li>When dealing with a categorical variable that uses numbers for encoding in <code>mapping</code>'s keyword arguments (<code>color</code>, <code>marker</code>, etc.), the <code>nonnumeric</code> function  should be used to instruct <code>AoG.jl</code> to interpret it as a categorical variable; otherwise, it will treat it as a continuous variable or throw an error.</li> <li>Subplots can be created from a categorical variable (faceting) using the keyword arguments <code>col</code>, <code>row</code>, and <code>layout</code> within a <code>mapping</code> call.</li> <li><code>AoG.jl</code> supports various types of plots (geometries), which can be found in <code>Makie.jl</code>'s documentation.</li> <li><code>AoG.jl</code> provides built-in functions that reduce the need for data wrangling or additional operations to generate commonly used plots. Examples include  <code>histogram</code>, used to create histograms, and <code>linear</code>, used to perform a linear regression and plot the results.</li> <li>Some of the built-in function names collide with those exported by <code>Pumas</code> and <code>Makie.jl</code> (e.g. <code>linear</code> is also exported by <code>Pumas</code>). When that happens, you  must qualify the function as <code>AlgebraOfGraphics.&lt;function name&gt;</code> (e.g. <code>AlgebraOfGraphics.linear()</code>). </li> <li>The <code>+</code> operator can be used to superimpose layers in plots.</li> <li>Both <code>*</code> and <code>+</code> adhere to the distributive law, enabling the creation of complex plots with a concise syntax. For instance, you can define multiple <code>visual</code>s  for the same <code>data</code> and <code>mapping</code> with <code>data_layer * mapping_layer * (visual1 + visual2 + visual3)</code> instead of defining the three plots separately and then  adding them together.</li> <li>By default, <code>AoG.jl</code> uses the column names from the dataset as axis labels, but users can customize them within the <code>mapping</code> call using the <code>Pair</code> syntax (e.g.,  <code>:column_name =&gt; \"display name\"</code>). The same customization can be applied for legend and faceting titles.</li> <li>Axis customization options can be passed through the <code>axis</code> keyword argument of <code>draw</code>. <code>axis</code> can take any of the customization options for the <code>Axis</code>  object of <code>Makie.jl</code> as a <code>NamedTuple</code> (e.g., <code>axis = (; kwarg1=val1, kwarg2=val2, ...)</code>).</li> <li>Customization options for <code>Figure</code> can also be specified through a <code>NamedTuple</code> and the <code>figure</code> keyword argument from <code>draw</code>. Legends can be customized using  the <code>legend</code> keyword argument.</li> <li>Users can specify a custom color palette for plots using the <code>palettes</code> keyword argument in the <code>draw</code> function.</li> <li>Specific customization options for a particular geometry can be applied inside a <code>visual</code> call by passing supported keyword arguments for that geometry (e.g.,  <code>visual(Lines; linestyle=:dash, color=:red)</code>). While some keyword arguments like <code>color</code> are supported by many geometries, others are specific to certain types  of plots, such as <code>show_notch</code> for box plots.</li> <li>The <code>renamer</code> function allows users to customize the display values used to encode a categorical variable. When using <code>renamer</code>, <code>nonnumeric</code> is not needed.</li> </ul>"},{"location":"reference/#summary-of-basic-commands","title":"Summary of Basic Commands","text":"Action Command Observations Create a data layer <code>data</code> Used to specify the dataset that will be used to generate the plot. Usually used as <code>data(&lt;DataFrame&gt;)</code> Create a mapping layer <code>mapping</code> Determines how the data will be used in the plot Create a visual layer <code>visual</code> Determines the type of plot that will be created Combine several <code>AoG.jl</code> layers <code>*</code> Layers are combined by \"multiplying\" them (e.g., <code>plt = data_layer * mapping_layer * visual_layer</code>) Display an <code>AoG.jl</code> plot <code>draw</code> <code>draw</code> can also contain many important customization options, such as <code>figure</code> and <code>axis</code> Save a plot <code>save(&lt;filename&gt;, &lt;result from draw&gt;</code>) The filename must contain an appropriate file format, such as PNG, SVG or PDF when using <code>CairoMakie.jl</code>. You can also customize the image resolution using the <code>px_per_unit</code> (for PNG) and <code>pt_per_unit</code> (for SVG) keyword arguments Avoid that a categorical variable encoded with numbers will be interpreted as a continuous variable <code>nonnumeric</code> Used inside of a <code>mapping</code> call with <code>Pair</code> syntax (e.g., <code>kwarg = :column_name =&gt; nonnumeric</code>) Apply faceting by columns <code>col</code> Used as a keyword argument inside of a <code>mapping</code> call Apply faceting by rows <code>row</code> Used as a keyword argument inside of a <code>mapping</code> call Create a grid of subplots <code>layout</code> Used as a keyword argument inside of a <code>mapping</code> call Specify a geometry for a plot <code>visual(&lt;geometry&gt;)</code> <code>Makie.jl</code> supports an extensive list of geometries, which can be found in their documentation Superimpose layers <code>+</code> Used in the same way as when adding numbers (e.g., <code>plt = plt1 + plt2</code>) Customize the display name for axis labels and legend and faceting titles <code>:column_name =&gt; \"display name\"</code> Used inside of a <code>mapping</code> call Use a custom color palette <code>palettes = (; color=[&lt;list of colors&gt;])</code> You can use one of Julia's named colors or specify them in a variety of formats such as RGB and Hex codes Change a categorical variable's encoding values (just for display) <code>renamer</code> <code>renamer</code> can receive a series of <code>Pair</code>s specifying the dataset encoding value and the desired display name (e.g., <code>renamer(:val1 =&gt; \"display value 1\", :val2 =&gt; \"display value 2\")</code>) Add customization options specific to a geometry <code>visual(&lt;geometry&gt;; kwargs)</code> The accepted values for <code>kwargs</code> will depend on the type of plot that is being customized"},{"location":"reference/#comparison-between-ggplot2-and-aogjl","title":"Comparison between <code>ggplot2</code> and <code>AoG.jl</code>","text":"action <code>ggplot2</code> <code>AoG.jl</code> Input data <code>ggplot(df)</code> <code>data(df)</code> Map aesthetics <code>aes(...)</code> <code>mapping(...)</code> Add geometries <code>geom_*(...)</code> <code>visual(...)</code> Combine layers <code>+</code> <code>*</code> Facetting <code>facet_[wrap\\|grid](~ column)</code> <code>mapping(...; [row\\|col\\|layout]=:column)</code> Customize scales <code>scale_*_manual()</code> <code>renamer(...)</code> Themes <code>theme_*(...)</code> <code>set_theme!(theme_*()); draw(plt)</code> Customize axes labels <code>[x\\|y]lab(\"...\")</code> <code>draw(plt, axis=(; [x\\|y]label=\"...\"))</code> Customize color <code>scale_[fill\\|color]_*(...)</code> <code>draw(plt, palettes=(; color=...))</code> or <code>visual(..., colormap=...</code>\") Save plot <code>ggsave(\"file.[png\\|svg]\")</code> <code>save(\"file.[png\\|svg]\", draw(plt))</code> Frequency <code>geom_bar()</code> or <code>stat_count()</code> <code>frequency()</code> Histogram <code>geom_histogram</code> or <code>stat_bin()</code> <code>histogram()</code> Density <code>geom_density</code> or <code>stat_density()</code> <code>density()</code> Expectation/Mean <code>stat_summary(fun = \"mean\")</code> <code>expectation()</code> Smooth trend <code>stat_smooth</code> or <code>geom_smooth()</code> <code>(visual(...) + smooth())</code> Linear trend <code>stat_smooth(method = \"lm\")</code> or <code>geom_smooth(method = \"lm\")</code> <code>(visual(...) + linear())</code> Log scale <code>scale_[x\\|y]_log10()</code> <code>draw(plt; axis=(; [x\\|y]scale=log10))</code>"},{"location":"reference/#glossary","title":"Glossary","text":"<code>Makie.jl</code> <p>A popular and powerful data visualization backend written in Julia. It enables the creation of a wide range of visualizations, including publication-quality  vector graphics. We consider <code>Makie.jl</code> to be the present and future of plotting in Julia. Many tools, such as <code>AlgebraOfGraphics.jl</code>, are being developed with  <code>Makie.jl</code> as their foundation.</p> Cairo and <code>CairoMakie.jl</code> <p>Cairo is an open-source graphics library used by <code>Makie.jl</code> via the <code>CairoMakie.jl</code> package. <code>CairoMakie.jl</code> is one of the interfaces supported by <code>Makie.jl</code>,  alongside <code>GLMakie.jl</code> and <code>WebGLMakie.jl</code>. This interface allows the creation of static plots, primarily in formats like SVG and PNG. This is the interface that most Pumas users will want to use and the one you should choose if unsure.</p> OpenGL and <code>GLMakie.jl</code> <p>OpenGL, short for Open Graphics Library, is another interface supported by <code>Makie.jl</code>. It facilitates rendering visualizations on a standalone screen  with support for interactivity such as clicking, dragging, and zooming. The <code>GLMakie.jl</code> package provides access to this interface. Keep in mind that plots  generated with <code>GLMakie.jl</code> will not be displayed in VS Code or Pluto notebooks.</p> Grammar of Graphics (check Wilkinson, Leland. The grammar of graphics. Springer Berlin Heidelberg, 2012.)  <p>The Grammar of Graphics is a versatile approach to data visualization, where plots are constructed using algebraic expressions. It allows for flexible  creation of visuals by specifying data, aesthetics, and geometric elements as modular components.</p> <code>AlgebraOfGraphics.jl</code> (<code>AoG.jl</code>) <p>A plotting library built on top of <code>Makie.jl</code> that aims to provide a simple language for data visualization. Its syntax is inspired by the Grammar of  Graphics concept and is similar to R's <code>ggplot2</code>.</p> Layer <p>The building blocks of an <code>AoG.jl</code> plot, which commonly includes three layers: <code>data</code>, <code>mapping</code>, and <code>visual</code>.</p> Faceting <p>A term used to refer to the act of splitting a plot into several subplots. <code>AoG.jl</code> supports faceting by columns, rows, and creating a grid of subplots  automatically.</p> Geometries <p>The different types of plots that can be created with <code>AoG.jl</code>, such as scatter plots, bar plots, violin plots, etc.</p>"},{"location":"reference/#get-in-touch","title":"Get in touch","text":"<p>If you have any suggestions or want to get in touch with our education team, please send an email to training@pumas.ai.</p>"},{"location":"reference/#license","title":"License","text":"<p>This content is licensed under Creative Commons Attribution-ShareAlike 4.0 International.</p> <p></p>"},{"location":"waiver/","title":"Waiver of Liability for Pumas-AI Data Visualization Workshop","text":"<p>By using the content provided by Pumas-AI, you agree to the following:</p> <ol> <li>You acknowledge that Pumas-AI has provided you with access to certain content (the \"Content\"),    including but not limited to software, documentation, images, videos, and other materials.</li> <li>You understand and agree that the Content is provided \"as is,\" without warranty of any kind,    either express or implied, including but not limited to the implied warranties of merchantability    and fitness for a particular purpose.</li> <li>You acknowledge that Pumas-AI is not responsible for how you use the Content,    and that Pumas-AI shall not be liable for any damages arising from your use of the Content,    including but not limited to direct, indirect, incidental, special, consequential, or punitive damages,    whether in an action of contract, negligence, or other tortious action,    even if Pumas-AI has been advised of the possibility of such damages.</li> <li>You agree to indemnify, defend, and hold harmless Pumas-AI, its officers, directors, employees, agents,    and affiliates from and against any and all claims, damages, losses, liabilities,    and expenses (including reasonable attorneys' fees) arising from your use of the Content.</li> <li>You acknowledge that this Waiver of Liability is a legally binding agreement between you and Pumas-AI,    and that it governs your use of the Content.    If you do not agree to the terms of this Waiver of Liability, you must immediately cease using the Content.</li> </ol>"},{"location":"waiver/#get-in-touch","title":"Get in touch","text":"<p>If you have any suggestions or want to get in touch with our education team, please send an email to training@pumas.ai.</p>"},{"location":"waiver/#license","title":"License","text":"<p>This content is licensed under Creative Commons Attribution-ShareAlike 4.0 International.</p> <p></p>"}]}